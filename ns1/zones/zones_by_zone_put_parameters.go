// Code generated by go-swagger; DO NOT EDIT.

package zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/mburtless/ns1-go-v3/models"
)

// NewZonesByZonePutParams creates a new ZonesByZonePutParams object
// with the default values initialized.
func NewZonesByZonePutParams() *ZonesByZonePutParams {
	var ()
	return &ZonesByZonePutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewZonesByZonePutParamsWithTimeout creates a new ZonesByZonePutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewZonesByZonePutParamsWithTimeout(timeout time.Duration) *ZonesByZonePutParams {
	var ()
	return &ZonesByZonePutParams{

		timeout: timeout,
	}
}

// NewZonesByZonePutParamsWithContext creates a new ZonesByZonePutParams object
// with the default values initialized, and the ability to set a context for a request
func NewZonesByZonePutParamsWithContext(ctx context.Context) *ZonesByZonePutParams {
	var ()
	return &ZonesByZonePutParams{

		Context: ctx,
	}
}

// NewZonesByZonePutParamsWithHTTPClient creates a new ZonesByZonePutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewZonesByZonePutParamsWithHTTPClient(client *http.Client) *ZonesByZonePutParams {
	var ()
	return &ZonesByZonePutParams{
		HTTPClient: client,
	}
}

/*ZonesByZonePutParams contains all the parameters to send to the API endpoint
for the zones by zone put operation typically these are written to a http.Request
*/
type ZonesByZonePutParams struct {

	/*Body
	  The zone to create

	*/
	Body *models.ZoneRequest
	/*Zone
	  The name of the zone to retrieve

	*/
	Zone string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the zones by zone put params
func (o *ZonesByZonePutParams) WithTimeout(timeout time.Duration) *ZonesByZonePutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the zones by zone put params
func (o *ZonesByZonePutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the zones by zone put params
func (o *ZonesByZonePutParams) WithContext(ctx context.Context) *ZonesByZonePutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the zones by zone put params
func (o *ZonesByZonePutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the zones by zone put params
func (o *ZonesByZonePutParams) WithHTTPClient(client *http.Client) *ZonesByZonePutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the zones by zone put params
func (o *ZonesByZonePutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the zones by zone put params
func (o *ZonesByZonePutParams) WithBody(body *models.ZoneRequest) *ZonesByZonePutParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the zones by zone put params
func (o *ZonesByZonePutParams) SetBody(body *models.ZoneRequest) {
	o.Body = body
}

// WithZone adds the zone to the zones by zone put params
func (o *ZonesByZonePutParams) WithZone(zone string) *ZonesByZonePutParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the zones by zone put params
func (o *ZonesByZonePutParams) SetZone(zone string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *ZonesByZonePutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param zone
	if err := r.SetPathParam("zone", o.Zone); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
