// Code generated by go-swagger; DO NOT EDIT.

package zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the zones client
type API interface {
	// ZonesByZoneGet gets zone
	// Returns a single active Zone and its basic configuration details. For convenience, a list of records in the zone, and some basic details of each record, is also included.
	ZonesByZoneGet(ctx context.Context, params *ZonesByZoneGetParams) (*ZonesByZoneGetOK, error)
	// ZonesByZonePost modifies zone
	// Very long desc of modifying a zone
	ZonesByZonePost(ctx context.Context, params *ZonesByZonePostParams) (*ZonesByZonePostOK, error)
	// ZonesByZonePut creates zone
	// Very long desc of creating a new zone
	ZonesByZonePut(ctx context.Context, params *ZonesByZonePutParams) (*ZonesByZonePutOK, error)
	// ZonesGet gets zones
	// Returns all active zones and basic zone configuration details for each.
	ZonesGet(ctx context.Context, params *ZonesGetParams) (*ZonesGetOK, error)
}

// New creates a new zones API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for zones API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
ZonesByZoneGet gets zone

Returns a single active Zone and its basic configuration details. For convenience, a list of records in the zone, and some basic details of each record, is also included.
*/
func (a *Client) ZonesByZoneGet(ctx context.Context, params *ZonesByZoneGetParams) (*ZonesByZoneGetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ZonesByZoneGet",
		Method:             "GET",
		PathPattern:        "/zones/{zone}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesByZoneGetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZonesByZoneGetOK), nil

}

/*
ZonesByZonePost modifies zone

Very long desc of modifying a zone
*/
func (a *Client) ZonesByZonePost(ctx context.Context, params *ZonesByZonePostParams) (*ZonesByZonePostOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ZonesByZonePost",
		Method:             "POST",
		PathPattern:        "/zones/{zone}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesByZonePostReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZonesByZonePostOK), nil

}

/*
ZonesByZonePut creates zone

Very long desc of creating a new zone
*/
func (a *Client) ZonesByZonePut(ctx context.Context, params *ZonesByZonePutParams) (*ZonesByZonePutOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ZonesByZonePut",
		Method:             "PUT",
		PathPattern:        "/zones/{zone}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesByZonePutReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZonesByZonePutOK), nil

}

/*
ZonesGet gets zones

Returns all active zones and basic zone configuration details for each.
*/
func (a *Client) ZonesGet(ctx context.Context, params *ZonesGetParams) (*ZonesGetOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ZonesGet",
		Method:             "GET",
		PathPattern:        "/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZonesGetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ZonesGetOK), nil

}
