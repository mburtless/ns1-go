// Code generated by go-swagger; DO NOT EDIT.

package zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the zones client
type API interface {
	// CreateZone creates a new DNS zone
	// Very long desc of creating a new zone.
	CreateZone(ctx context.Context, params *CreateZoneParams) (*CreateZoneOK, error)
	// GetZone gets a zone s details
	// Returns a single active Zone and its basic configuration details. For convenience, a list of records in the zone, and some basic details of each record, is also included.
	GetZone(ctx context.Context, params *GetZoneParams) (*GetZoneOK, error)
	// GetZones gets list of active zones
	// Returns all active zones and basic zone configuration details for each.
	GetZones(ctx context.Context, params *GetZonesParams) (*GetZonesOK, error)
	// ModifyZone modifies a zone
	// Very long desc of modifying a zone.
	ModifyZone(ctx context.Context, params *ModifyZoneParams) (*ModifyZoneOK, error)
}

// New creates a new zones API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for zones API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateZone creates a new DNS zone

Very long desc of creating a new zone.
*/
func (a *Client) CreateZone(ctx context.Context, params *CreateZoneParams) (*CreateZoneOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createZone",
		Method:             "PUT",
		PathPattern:        "/zones/{zone}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateZoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateZoneOK), nil

}

/*
GetZone gets a zone s details

Returns a single active Zone and its basic configuration details. For convenience, a list of records in the zone, and some basic details of each record, is also included.
*/
func (a *Client) GetZone(ctx context.Context, params *GetZoneParams) (*GetZoneOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getZone",
		Method:             "GET",
		PathPattern:        "/zones/{zone}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetZoneOK), nil

}

/*
GetZones gets list of active zones

Returns all active zones and basic zone configuration details for each.
*/
func (a *Client) GetZones(ctx context.Context, params *GetZonesParams) (*GetZonesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getZones",
		Method:             "GET",
		PathPattern:        "/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZonesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetZonesOK), nil

}

/*
ModifyZone modifies a zone

Very long desc of modifying a zone.
*/
func (a *Client) ModifyZone(ctx context.Context, params *ModifyZoneParams) (*ModifyZoneOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyZone",
		Method:             "POST",
		PathPattern:        "/zones/{zone}",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyZoneReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyZoneOK), nil

}
