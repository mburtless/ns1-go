// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Zone Zone
// swagger:model Zone
type Zone struct {

	// dns servers
	// Required: true
	DNSServers []string `json:"dns_servers"`

	// expiry
	// Required: true
	Expiry *int32 `json:"expiry"`

	// hostmaster
	// Required: true
	Hostmaster *string `json:"hostmaster"`

	// id
	// Required: true
	ID *string `json:"id"`

	// meta
	// Required: true
	Meta *Metadata `json:"meta"`

	// network pools
	// Required: true
	NetworkPools []string `json:"network_pools"`

	// networks
	// Required: true
	Networks []int32 `json:"networks"`

	// nx ttl
	// Required: true
	NxTTL *int32 `json:"nx_ttl"`

	// primary
	// Required: true
	Primary *ZoneRequestPrimary `json:"primary"`

	// records
	// Required: true
	Records []*ZoneRequestRecords `json:"records"`

	// refresh
	// Required: true
	Refresh *int32 `json:"refresh"`

	// retry
	// Required: true
	Retry *int32 `json:"retry"`

	// ttl
	// Required: true
	TTL *int32 `json:"ttl"`

	// zone
	// Required: true
	Zone *string `json:"zone"`
}

// Validate validates this zone
func (m *Zone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostmaster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkPools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNxTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefresh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Zone) validateDNSServers(formats strfmt.Registry) error {

	if err := validate.Required("dns_servers", "body", m.DNSServers); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateExpiry(formats strfmt.Registry) error {

	if err := validate.Required("expiry", "body", m.Expiry); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateHostmaster(formats strfmt.Registry) error {

	if err := validate.Required("hostmaster", "body", m.Hostmaster); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateMeta(formats strfmt.Registry) error {

	if err := validate.Required("meta", "body", m.Meta); err != nil {
		return err
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *Zone) validateNetworkPools(formats strfmt.Registry) error {

	if err := validate.Required("network_pools", "body", m.NetworkPools); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateNetworks(formats strfmt.Registry) error {

	if err := validate.Required("networks", "body", m.Networks); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateNxTTL(formats strfmt.Registry) error {

	if err := validate.Required("nx_ttl", "body", m.NxTTL); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validatePrimary(formats strfmt.Registry) error {

	if err := validate.Required("primary", "body", m.Primary); err != nil {
		return err
	}

	if m.Primary != nil {
		if err := m.Primary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary")
			}
			return err
		}
	}

	return nil
}

func (m *Zone) validateRecords(formats strfmt.Registry) error {

	if err := validate.Required("records", "body", m.Records); err != nil {
		return err
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Zone) validateRefresh(formats strfmt.Registry) error {

	if err := validate.Required("refresh", "body", m.Refresh); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateRetry(formats strfmt.Registry) error {

	if err := validate.Required("retry", "body", m.Retry); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateTTL(formats strfmt.Registry) error {

	if err := validate.Required("ttl", "body", m.TTL); err != nil {
		return err
	}

	return nil
}

func (m *Zone) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Zone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Zone) UnmarshalBinary(b []byte) error {
	var res Zone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
