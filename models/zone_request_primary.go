// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZoneRequestPrimary ZoneRequest_primary
// swagger:model ZoneRequest_primary
type ZoneRequestPrimary struct {

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// secondaries
	// Required: true
	Secondaries []*Secondaries `json:"secondaries"`
}

// Validate validates this zone request primary
func (m *ZoneRequestPrimary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneRequestPrimary) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *ZoneRequestPrimary) validateSecondaries(formats strfmt.Registry) error {

	if err := validate.Required("secondaries", "body", m.Secondaries); err != nil {
		return err
	}

	for i := 0; i < len(m.Secondaries); i++ {
		if swag.IsZero(m.Secondaries[i]) { // not required
			continue
		}

		if m.Secondaries[i] != nil {
			if err := m.Secondaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneRequestPrimary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneRequestPrimary) UnmarshalBinary(b []byte) error {
	var res ZoneRequestPrimary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
