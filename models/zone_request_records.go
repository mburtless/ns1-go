// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZoneRequestRecords ZoneRequest_records
// swagger:model ZoneRequest_records
type ZoneRequestRecords struct {

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// id
	// Required: true
	ID *string `json:"id"`

	// short answers
	// Required: true
	ShortAnswers []string `json:"short_answers"`

	// tier
	// Required: true
	Tier *int32 `json:"tier"`

	// ttl
	TTL int32 `json:"ttl,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this zone request records
func (m *ZoneRequestRecords) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneRequestRecords) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *ZoneRequestRecords) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ZoneRequestRecords) validateShortAnswers(formats strfmt.Registry) error {

	if err := validate.Required("short_answers", "body", m.ShortAnswers); err != nil {
		return err
	}

	return nil
}

func (m *ZoneRequestRecords) validateTier(formats strfmt.Registry) error {

	if err := validate.Required("tier", "body", m.Tier); err != nil {
		return err
	}

	return nil
}

func (m *ZoneRequestRecords) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneRequestRecords) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneRequestRecords) UnmarshalBinary(b []byte) error {
	var res ZoneRequestRecords
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
