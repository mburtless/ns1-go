// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ZoneRequest ZoneRequest
// swagger:model ZoneRequest
type ZoneRequest struct {

	// dns servers
	DNSServers []string `json:"dns_servers"`

	// expiry
	Expiry int32 `json:"expiry,omitempty"`

	// hostmaster
	Hostmaster string `json:"hostmaster,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// meta
	Meta *Metadata `json:"meta,omitempty"`

	// network pools
	NetworkPools []string `json:"network_pools"`

	// networks
	Networks []int32 `json:"networks"`

	// nx ttl
	NxTTL int32 `json:"nx_ttl,omitempty"`

	// primary
	Primary *ZoneRequestPrimary `json:"primary,omitempty"`

	// records
	Records []*ZoneRequestRecords `json:"records"`

	// refresh
	Refresh int32 `json:"refresh,omitempty"`

	// retry
	Retry int32 `json:"retry,omitempty"`

	// ttl
	TTL int32 `json:"ttl,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this zone request
func (m *ZoneRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZoneRequest) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneRequest) validatePrimary(formats strfmt.Registry) error {

	if swag.IsZero(m.Primary) { // not required
		return nil
	}

	if m.Primary != nil {
		if err := m.Primary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary")
			}
			return err
		}
	}

	return nil
}

func (m *ZoneRequest) validateRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZoneRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZoneRequest) UnmarshalBinary(b []byte) error {
	var res ZoneRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
